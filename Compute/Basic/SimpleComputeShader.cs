/* Tutorial followed: http://www.emersonshaffer.com/blog/2016/5/11/unity3d-compute-shader-introduction-tutorial
   This script generates a render texture filled with values generated by a compute shader
   and assigns that render texture to the specified material's main texture(albedo) */

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SimpleCSInvoker : MonoBehaviour
{
    // Material where you want the RenderTexture applied to
    public Material computeMaterial;

    // Holds your compute shader reference
    private ComputeShader fillWithRedShader;
    // Holds the index of the kernel programs you will be using
    private int kernelIndex;

    void Start ()
    {
        /* Assign our compute shader from the Assets/Assets/Resources/ directory in out project files
           Use a public static class with public const string values you can reference instead of variables
           Small performance benefit to using constants vs variables
           https://stackoverflow.com/questions/5833912/advantages-of-using-const-instead-of-variables-inside-methods */
        fillWithRedShader = (ComputeShader)Resources.Load(MyStrings.ComputePractice);
        // Capture the index for our kernel program we want to use(method defined in compute shader)
        kernelIndex = fillWithRedShader.FindKernel(MyStrings.FillWithRed);

        // We create a render texture that will hold the output of our compute shader
        RenderTexture tempTex = new RenderTexture(256, 256, 0);
        // Enable the ability to write to our texture (random access write)
        tempTex.enableRandomWrite = true;
        // Actually create the output render texture
        tempTex.Create();

        /* Set the: - kernel program the output texture will be used in
                    - name of the buffer variable being used in your compute shader code
                    - output texture */
        fillWithRedShader.SetTexture(kernelIndex, MyStrings.result, tempTex);
        // Actually call your compute shader
        fillWithRedShader.Dispatch(kernelIndex, 256, 256, 1);

        /* Assign the output render texture generated by your compute shader to the 
           main texture(albedo if using standard shader) of any desired material */
        computeMaterial.mainTexture = tempTex;
    }
}
